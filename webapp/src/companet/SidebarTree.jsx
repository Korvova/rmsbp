// src/companet/SidebarTree.jsx
import { useEffect, useState, useCallback } from 'react';
import { Tree } from 'react-arborist';
import {
  loadTree, createFolder, createGroup, renameNode, deleteNode, moveNode,
  TREE_CHANGED_EVENT,
} from '../service/groupsStorage';

export default function SidebarTree({ onPick }) {
  const [treeData, setTreeData] = useState([]);
  const [selectedId, setSelectedId] = useState('root');
  const [version, setVersion] = useState(0);
  const [menu, setMenu] = useState(null); // { x, y, id, name, isRoot, isFolder }
  const bump = () => setVersion(v => v + 1);

  const reload = useCallback(() => {
    const t = loadTree();
    setTreeData(Array.isArray(t) ? t : []);
  }, []);

  useEffect(() => { reload(); }, [reload]);

  // —Å–ª—É—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ—Ä–∞–¥–∂–∞
  useEffect(() => {
    const h = () => { reload(); bump(); };
    window.addEventListener(TREE_CHANGED_EVENT, h);
    return () => window.removeEventListener(TREE_CHANGED_EVENT, h);
  }, [reload]);

  // –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  useEffect(() => {
    const close = () => setMenu(null);
    const esc = (e) => { if (e.key === 'Escape') setMenu(null); };
    window.addEventListener('click', close);
    window.addEventListener('scroll', close, true);
    window.addEventListener('keydown', esc);
    return () => {
      window.removeEventListener('click', close);
      window.removeEventListener('scroll', close, true);
      window.removeEventListener('keydown', esc);
    };
  }, []);

  const toIds = (items) =>
    Array.isArray(items)
      ? items.map(x => (x && typeof x === 'object' ? x.id : x)).filter(Boolean)
      : [];

  const findInLocal = (id) => {
    const stack = [...treeData];
    while (stack.length) {
      const n = stack.shift();
      if (n.id === id) return n;
      if (n.children?.length) stack.push(...n.children);
    }
    return null;
  };

  // –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é
  const doRename = () => {
    if (!menu || menu.isRoot) return;
    const t = prompt('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', menu.name);
    if (t && t.trim()) renameNode(menu.id, t.trim());
    setMenu(null);
  };
  const doDelete = () => {
    if (!menu || menu.isRoot) return;
    if (confirm('–£–¥–∞–ª–∏—Ç—å?')) {
      deleteNode(menu.id);
      if (menu.id === selectedId) setSelectedId('root');
    }
    setMenu(null);
  };
  const doCreateFolder = () => {
    if (!menu || !menu.isFolder) return;
    const t = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏', '–ù–æ–≤–∞—è –ø–∞–ø–∫–∞');
    if (t && t.trim()) createFolder(menu.id, t.trim());
    setMenu(null);
  };
  const doCreateGroup = () => {
    if (!menu || !menu.isFolder) return;
    const t = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞');
    if (t && t.trim()) createGroup(menu.id, t.trim());
    setMenu(null);
  };

  // —Å—Ç—Ä–æ–∫–∞ —Å–ø–∏—Å–∫–∞ ‚Äî –ª–æ–≤–∏–º –ü–ö–ú (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å attrs –∏ ref)
  const Row = ({ node, innerRef, attrs, children }) => {
    const onContextMenu = (e) => {
      e.preventDefault();
      e.stopPropagation();
      setMenu({
        x: e.clientX,
        y: e.clientY,
        id: node.id,
        name: node.data?.name ?? '',
        isRoot: node.id === 'root',
        isFolder: node.data?.type === 'folder',
      });
    };
    return (
      <div
        {...attrs}
        ref={innerRef}
        onContextMenu={(e) => {
          attrs?.onContextMenu?.(e);
          onContextMenu(e);
        }}
      >
        {children}
      </div>
    );
  };

  return (
    <div style={{ position:'relative', width: 280, borderRight: '1px solid #e5e7eb', overflow: 'auto' }}>
      <div style={{ padding: 8, display: 'flex', gap: 6 }}>
        <button onClick={() => { createFolder(selectedId || 'root', '–ù–æ–≤–∞—è –ø–∞–ø–∫–∞'); }}>
          + –ü–∞–ø–∫–∞
        </button>
        <button onClick={() => { createGroup(selectedId || 'root', '–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞'); }}>
          + –ì—Ä—É–ø–ø–∞
        </button>
      </div>

      <Tree
        key={version}
        data={treeData}
        renderRow={Row}
        indent={20}

        // DnD: root –Ω–µ —Ç–∞—Å–∫–∞–µ–º, –≤–Ω—É—Ç—Ä—å –≥—Ä—É–ø–ø—ã –∫–∏–¥–∞—Ç—å –Ω–µ–ª—å–∑—è
        disableDrag={(node) => node.id === 'root'}
        disableDrop={({ parentNode }) => parentNode?.data?.type === 'group'}

        onReady={(api) => {
          const init = selectedId || 'root';
          api.select([init]);
          const node = findInLocal(init);
          onPick?.(node || { id: 'root', type: 'folder', name: '–í—Å–µ –≥—Ä—É–ø–ø—ã' });
        }}

        onSelect={(items) => {
          const ids = toIds(items);
          const id = ids[0] || 'root';
          setSelectedId(id);
          const node = findInLocal(id);
          onPick?.(node || { id, type: 'folder', name: '–ü–∞–ø–∫–∞' });
        }}

        onMove={({ dragIds, parentId, index }) => {
          dragIds.forEach((id, i) => moveNode(id, parentId || 'root', (index ?? 0) + i));
        }}
      >



  {({ node, style, dragHandle }) => {
    const isFolder = node.data.type === 'folder';
    const icon = isFolder ? (node.isOpen ? 'üìÇ' : 'üìÅ') : 'üß©';

    return (
      <div
        style={{
          ...style,
          display: 'flex',
          gap: 8,
          alignItems: 'center',
          paddingTop: 4,
          paddingBottom: 4,
          paddingRight: 8,
          userSelect: 'none',
        }}
        onClick={(e) => node.handleClick(e)} // –∫–ª–∏–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é = —Ç–æ–ª—å–∫–æ select
      >
        {/* –ò–∫–æ–Ω–∫–∞: —Ç–µ–ø–µ—Ä—å –∏ toggle, –∏ select ‚Üí –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–∏—Ç—Å—è */}
        <span
          ref={dragHandle}
          title={isFolder ? (node.isOpen ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å') : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å'}
          onClick={(e) => {
            e.stopPropagation();
            if (isFolder) {
              node.toggle();   // —Ä–∞—Å–∫—Ä—ã—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å
              node.select();   // –ò –í–´–ë–†–ê–¢–¨ —ç—Ç—É –ø–∞–ø–∫—É
            }
          }}
          style={{ width: 18, cursor: isFolder ? 'pointer' : (node.id === 'root' ? 'default' : 'grab') }}
        >
          {icon}
        </span>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –±–µ–∑ toggle */}
        <span
          style={{ flex: 1, cursor: 'default' }}
          onClick={(e) => {
            e.stopPropagation();
            node.handleClick(e);
          }}
        >
          {node.data.name}
        </span>
      </div>
    );
  }}
</Tree>




      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
      {menu && (
        <div
          style={{
            position: 'fixed',
            left: menu.x,
            top: menu.y,
            background: '#fff',
            border: '1px solid #e5e7eb',
            borderRadius: 8,
            boxShadow: '0 8px 32px rgba(0,0,0,.12)',
            padding: 6,
            zIndex: 1000,
            minWidth: 200,
          }}
          onClick={(e) => e.stopPropagation()}
        >
          <div style={{ padding: '6px 10px', fontSize: 12, color: '#6b7280' }}>
            {menu.name}{menu.isRoot ? ' (root)' : ''}
          </div>
          <hr style={{ border: 0, borderTop: '1px solid #f1f5f9', margin: '6px 0' }} />

          {/* –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É */}
          <button
            style={{
              width: '100%', textAlign: 'left', padding: '6px 10px',
              background: 'none', border: 'none',
              cursor: menu.isFolder ? 'pointer' : 'not-allowed',
              opacity: menu.isFolder ? 1 : .5,
            }}
            disabled={!menu.isFolder}
            onClick={doCreateFolder}
          >
            ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
          </button>

          {/* –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç */}
          <button
            style={{
              width: '100%', textAlign: 'left', padding: '6px 10px',
              background: 'none', border: 'none',
              cursor: menu.isFolder ? 'pointer' : 'not-allowed',
              opacity: menu.isFolder ? 1 : .5,
            }}
            disabled={!menu.isFolder}
            onClick={doCreateGroup}
          >
            üß© –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
          </button>

          <hr style={{ border: 0, borderTop: '1px solid #f1f5f9', margin: '6px 0' }} />

          {/* –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å */}
          <button
            style={{
              width: '100%', textAlign: 'left', padding: '6px 10px',
              background: 'none', border: 'none',
              cursor: menu.isRoot ? 'not-allowed' : 'pointer',
              opacity: menu.isRoot ? .5 : 1
            }}
            disabled={menu.isRoot}
            onClick={doRename}
          >
            ‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
          </button>

          {/* –£–¥–∞–ª–∏—Ç—å */}
          <button
            style={{
              width: '100%', textAlign: 'left', padding: '6px 10px',
              background: 'none', border: 'none',
              color:'#dc2626',
              cursor: menu.isRoot ? 'not-allowed' : 'pointer',
              opacity: menu.isRoot ? .5 : 1
            }}
            disabled={menu.isRoot}
            onClick={doDelete}
          >
            üóë –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      )}
    </div>
  );
}
