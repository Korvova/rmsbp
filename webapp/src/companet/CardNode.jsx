import React, { useState, useEffect } from 'react';
import { Handle, Position, NodeToolbar } from 'reactflow';

import StatusToggle from './StatusToggle';
import RuleMenu from './RuleMenu';
import './card.css';

export default function CardNode({ id, data }) {
  const {
    label, color,
    done,
    rule,
    status = 'pending',
    initials, avatarUrl,
    difficulty, taskType,
    description = '',

    onTitle, onColor, onToggle, onDelete,
    onRuleChange,
    onCancel, onFreeze,
    onCancelPolicyToggle, onCancelPolicyChange,
    deps, selectedDeps, onToggleDep,
    cancelPolicy, cancelSelectedDeps, onToggleCancelDep,

    /** –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ */
    onDescription,
  } = data;

  // –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
 const [descOpen, setDescOpen] = useState(false);
 const [descDraft, setDescDraft] = useState(description || '');
 useEffect(() => setDescDraft(description || ''), [description]);

  const cardColor = {
    pending:  done ? '#8BC34A' : color,
    working:  '#2196F3',
    done:     '#8BC34A',
    cancel:   '#F44336',
    frozen:   '#B0BEC5',
  }[status];

  return (
    <div className="card" style={{ background: cardColor }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <input
        className="title"
        value={label}
        onChange={e => onTitle?.(id, e.target.value)}
      />

      {/* —Ä—è–¥ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: –∞–≤–∞—Ç–∞—Ä + —Å–ª–æ–∂–Ω–æ—Å—Ç—å */}
      <div className="meta-row">
        <StatusToggle avatarUrl={avatarUrl} initials={initials} />
        {typeof difficulty === 'number' && difficulty > 0 && (
          <span className="difficulty-badge" title="–°–ª–æ–∂–Ω–æ—Å—Ç—å">{difficulty}</span>
        )}
      </div>

      {/* —Ç–∏–ø –∑–∞–¥–∞—á–∏ */}
      <div className="type-pill">{taskType || '–ë–µ–∑ —Ç–∏–ø–∞'}</div>

      {/* –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã */}
      <Handle type="target" position={Position.Left} />
      <Handle type="source" position={Position.Right} />

      {/* –¢—É–ª–±–∞—Ä –°–ù–ò–ó–£ */}
      <NodeToolbar showOnHover position={Position.Bottom}>
        {/* –ì–æ—Ç–æ–≤–æ / –°–±—Ä–æ—Å */}
        <button title="–ì–æ—Ç–æ–≤–æ / –°–±—Ä–æ—Å" onClick={() => onToggle?.(id, !done)}>
          {done ? '‚Ü∫' : '‚úì'}
        </button>

        {/* –£–¥–∞–ª–∏—Ç—å */}
        <button title="–£–¥–∞–ª–∏—Ç—å" onClick={() => onDelete?.(id)}>üóë</button>

        {/* –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ (–ø–æ–∫–∞ –∏–∫–æ–Ω–∫–∞) */}
        <button title="–ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏">üëÅ</button>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ: –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <button title="–û–ø–∏—Å–∞–Ω–∏–µ" onClick={() => setDescOpen(v => !v)}>üìã</button>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –∏–∫–æ–Ω–∫–∞) */}
        <button title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è">üîî</button>

        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ–∫–∞ –∏–∫–æ–Ω–∫–∞) */}
        <button title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">üí¨</button>

        {/* –£—Å–ª–æ–≤–∏—è: –¥–∞—ë–º –∏ ‚öôÔ∏è –∏ üîÄ –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä—ã –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –º–µ–Ω—é */}
        <RuleMenu
          value={rule}
          onChange={val => onRuleChange?.(id, val)}
          deps={deps}
          selectedDeps={selectedDeps}
          onToggleDep={(edgeId, checked) => onToggleDep?.(id, edgeId, checked)}

          cancelPolicy={cancelPolicy}
          onCancelPolicyToggle={enabled => onCancelPolicyToggle?.(id, enabled)}
          onCancelPolicyChange={mode => onCancelPolicyChange?.(id, mode)}
          cancelSelectedDeps={cancelSelectedDeps}
          onToggleCancelDep={(edgeId, checked) => onToggleCancelDep?.(id, edgeId, checked)}

          onCancel={() => onCancel?.(id)}
          onFreeze={() => onFreeze?.(id)}

          renderTrigger={({ toggle }) => (
            <>
              <button title="–£—Å–ª–æ–≤–∏—è" onClick={toggle}>üîÄ</button>
              <button title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ª–æ–≤–∏–π" onClick={toggle}>‚öôÔ∏è</button>
            </>
          )}
        />
      </NodeToolbar>

      {/* –ü–æ–ø–æ–≤–µ—Ä —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º */}
      {descOpen && (
        <div className="desc-popover">
          <textarea
            value={descDraft}
            onChange={e => setDescDraft(e.target.value)}
            placeholder="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏‚Ä¶"
          />
          <div className="desc-actions">
            <button onClick={() => { setDescOpen(false); setDescDraft(description || ''); }}>–û—Ç–º–µ–Ω–∞</button>
            <button
              className="primary"
              onClick={() => { onDescription?.(id, descDraft); setDescOpen(false); }}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
