import { Handle, Position, NodeToolbar } from 'reactflow';
import StatusToggle from './StatusToggle';
import DifficultyBadge from './DifficultyBadge';
import RuleMenu from './RuleMenu';
import './card.css';

export default function CardNode({ id, data }) {
  const {
    label,
    color,
    done,
    rule,
    status = 'pending',
    // üëá –Ω–æ–≤—ã–µ –ø–æ–ª—è (–º–æ–∂–µ—à—å –ø–æ–∑–∂–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é-–±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è)
    initials,
    avatarUrl,
    difficulty,         // —á–∏—Å–ª–æ 1..10
    taskType,           // —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∫–æ–¥–∏–Ω–≥"
    onTitle,
    onColor,
    onToggle,
    onDelete,
    onRuleChange,
    onCancel,
    onFreeze,
  } = data;

  const cardColor = {
    pending: done ? '#8BC34A' : color,
    working: '#2196F3',
    done:    '#8BC34A',
    cancel:  '#F44336',
    frozen:  '#B0BEC5',
  }[status];

  return (
    <div className="card" style={{ background: cardColor }}>
     <NodeToolbar position={Position.Top}>
        <button onClick={() => onToggle?.(id, !done)}>{done ? '‚Ü∫' : '‚úì'}</button>
        <button onClick={() => onDelete?.(id)}>üóë</button>
        <RuleMenu
          value={rule}
          onChange={val => onRuleChange?.(id, val)}
          onCancel={() => onCancel?.(id)}
          onFreeze={() => onFreeze?.(id)}
        />
      </NodeToolbar>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <input
        className="title"
        value={label}
        onChange={(e) => onTitle?.(id, e.target.value)}
      />

      {/* –†—è–¥: –∞–≤–∞—Ç–∞—Ä/–∏–Ω–∏—Ü–∏–∞–ª—ã + –∫—Ä—É–∂–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
      <div className="meta-row">
        <StatusToggle avatarUrl={avatarUrl} initials={initials} />
        <DifficultyBadge value={difficulty} />
      </div>

      {/* –¢–∏–ø –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ¬´–±–µ–∑ —Ç–∏–ø–∞¬ª) */}
      <div className="type-pill">–¢–∏–ø: {taskType?.trim() || '–±–µ–∑ —Ç–∏–ø–∞'}</div>

      {/* –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ (–æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ) */}
      <input
        type="color"
        value={color}
        onChange={e => onColor?.(id, e.target.value)}
        title="–¶–≤–µ—Ç"
      />

      <button className="close" onClick={() => onDelete?.(id)}>√ó</button>

      <Handle type="target" position={Position.Left}  />
      <Handle type="source" position={Position.Right} />
    </div>
  );
}
