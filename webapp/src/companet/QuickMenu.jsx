import { useRef, useState, useEffect } from 'react';
import './quickmenu.css';

const BASE_TITLES = [
  '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
  '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ API-–∫–ª–∏–µ–Ω—Ç–∞',
  '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞',
  'UI –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
  '–ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
];
const EXTRA_TITLES = [
  '–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Vite',
  '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ API',
  '–õ–∏–Ω—Ç–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
  '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞',
  '–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã',
  '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞',
  '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è SSO',
  '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã',
  '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
  '–ú–µ—Ö–∞–Ω–∏–∑–º —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤',
];

const CONDITIONS = [
  { id: '',               label: '–ë–µ–∑ —É—Å–ª–æ–≤–∏—è' },
  { id: 'afterAny',       label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π' },
  { id: 'afterAll',       label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö' },
  { id: 'afterSelected',  label: '–ü–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π' },
  { id: 'atDate',         label: '–í –¥–∞—Ç—É (üìÖ)' },
  { id: 'afterAnyDelay',  label: '–ß–µ—Ä–µ–∑ X –¥–Ω–µ–π (‚è∞)' },
];

const BASE_ASSIGNEES = ['–ò–≤–∞–Ω', '–û–ª—å–≥–∞', '–°–µ—Ä–≥–µ–π', '–ê–π–∂–∞–Ω', '–î–º–∏—Ç—Ä–∏–π'];
const EXTRA_ASSIGNEES = ['–ú–∞—Ä–∏—è','–ê–ª–µ–∫—Å–µ–π','–ñ–∞–Ω–Ω–∞','–ü–∞–≤–µ–ª','–ï–ª–µ–Ω–∞','–ù—É—Ä–ª–∞–Ω','–ì—É–ª—å–Ω–∞—Ä','–†—É—Å–ª–∞–Ω','–¢–∏–º—É—Ä','–ö–∞—Ç–µ—Ä–∏–Ω–∞'];

const DIFFICULTY = Array.from({ length: 10 }, (_, i) => String(i + 1));
const TYPES      = ['–û—Ç—á—ë—Ç', '—Ä–∏—Å–µ—á', '–∫–æ–¥–∏–Ω–≥', '–¢–ó', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–µ–∑–∞', '–∞–Ω–∞–ª–∏–∑', '–ö–ü'];
const GROUPS     = ['–ë–µ–∑ –≥—Ä—É–ø–ø—ã','Core','Frontend','Backend','DevOps','Design','QA','Research'];

export default function QuickMenu({ x, y, onDraftChange }) {
  const stopAll = (e) => { e.stopPropagation(); e.preventDefault(); };

  const [open, setOpen] = useState({
    title:false, conditions:false, assignee:false, difficulty:false, type:false, group:false
  });
  const toggleOnly = (key) => () =>
    setOpen(o => {
      const isOpen = !!o[key];
      return { title:false, conditions:false, assignee:false, difficulty:false, type:false, group:false, [key]: !isOpen };
    });

  // ===== –ù–∞–∑–≤–∞–Ω–∏–µ =====
  const [titles, setTitles] = useState(BASE_TITLES);
  const extraIdxRef = useRef(0);
  const [pickedTitle, setPickedTitle] = useState(null);

  const handleMoreTitles = () => {
    const chunk = 5;
    const start = extraIdxRef.current;
    const items = Array.from({ length: chunk }, (_, i) => EXTRA_TITLES[(start + i) % EXTRA_TITLES.length]);
    extraIdxRef.current = (start + chunk) % EXTRA_TITLES.length;
    setTitles(prev => Array.from(new Set([...prev, ...items])));
  };

  // ===== –£—Å–ª–æ–≤–∏—è =====
  const [pickedCond, setPickedCond] = useState(null); // {id,label} | null

  // ===== –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å =====
  const [assignees, setAssignees] = useState(BASE_ASSIGNEES);
  const assExtraIdxRef = useRef(0);
  const [pickedAss, setPickedAss] = useState(null);
  const moreAssignees = () => {
    const chunk = 5;
    const start = assExtraIdxRef.current;
    const items = Array.from({ length: chunk }, (_, i) => EXTRA_ASSIGNEES[(start + i) % EXTRA_ASSIGNEES.length]);
    assExtraIdxRef.current = (start + chunk) % EXTRA_ASSIGNEES.length;
    setAssignees(prev => Array.from(new Set([...prev, ...items])));
  };

  // ===== –°–ª–æ–∂–Ω–æ—Å—Ç—å =====
  const [pickedDiff, setPickedDiff] = useState(null);

  // ===== –¢–∏–ø =====
  const [pickedType, setPickedType] = useState(null);

  // ===== –ì—Ä—É–ø–ø–∞ =====
  const [pickedGroup, setPickedGroup] = useState('');

  // summary –Ω–∞–≤–µ—Ä—Ö
  useEffect(() => {
    onDraftChange?.({
      title: pickedTitle || null,
      conditionId: pickedCond?.id || '',
      conditionLabel: pickedCond?.label || '',
      assignee: pickedAss || null,
      difficulty: pickedDiff || null,
      type: pickedType || null,
      group: pickedGroup ?? '',
    });
  }, [pickedTitle, pickedCond, pickedAss, pickedDiff, pickedType, pickedGroup, onDraftChange]);

  const itemClass = (key, picked) =>
    [
      'quickmenu-item',
      'has-sub',
      open[key] ? 'is-active' : '',
      picked ? 'is-picked' : '',
    ].join(' ');

  return (
    <div
      className="quickmenu"
      style={{ left: x, top: y }}
      onPointerDown={stopAll}
      onMouseDown={stopAll}
      onClick={stopAll}
    >
      <ul className="quickmenu-summary">
        <li><span className="sm-label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>     <strong className="sm-value">{pickedTitle || '‚Äî'}</strong></li>
        <li><span className="sm-label">–£—Å–ª–æ–≤–∏—è:</span>      <strong className="sm-value">{pickedCond?.label  || '‚Äî'}</strong></li>
        <li><span className="sm-label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</span>  <strong className="sm-value">{pickedAss   || '‚Äî'}</strong></li>
        <li><span className="sm-label">–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>    <strong className="sm-value">{pickedDiff  || '‚Äî'}</strong></li>
        <li><span className="sm-label">–¢–∏–ø:</span>          <strong className="sm-value">{pickedType  || '‚Äî'}</strong></li>
        <li><span className="sm-label">–ì—Ä—É–ø–ø–∞:</span>       <strong className="sm-value">{pickedGroup || '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'}</strong></li>
      </ul>

      <div className="quickmenu-inner">
        {/* ===== –ù–∞–∑–≤–∞–Ω–∏–µ ===== */}
        <div className={itemClass('title', !!pickedTitle)} onClick={toggleOnly('title')}>
          –ù–∞–∑–≤–∞–Ω–∏–µ
          {open.title && (
            <div className="quickmenu-sub dropdown level-1" onClick={stopAll}>
              <div className="qm-col-list">
                {titles.map(t => (
                  <div
                    key={t}
                    className={'quickmenu-subitem ' + (pickedTitle === t ? 'is-picked' : '')}
                    onClick={() => setPickedTitle(t)}
                  >
                    {t}
                  </div>
                ))}
                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <button className="qm-link" onClick={handleMoreTitles}>‚ûï –ï—â—ë</button>
                  <button className="qm-link danger" onClick={() => setPickedTitle(null)}>‚ùå –û—Ç–º–µ–Ω–∞</button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* ===== –£—Å–ª–æ–≤–∏—è ===== */}
        <div className={itemClass('conditions', !!pickedCond)} onClick={toggleOnly('conditions')}>
          –£—Å–ª–æ–≤–∏—è
          {open.conditions && (
            <div className="quickmenu-sub dropdown level-2" onClick={stopAll}>
              <div className="qm-col-list">
                {CONDITIONS.map(c => (
                  <div
                    key={c.id}
                    className={'quickmenu-subitem ' + (pickedCond?.id === c.id ? 'is-picked' : '')}
                    onClick={() => setPickedCond(c)}
                  >
                    {c.label}
                  </div>
                ))}
                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <span className="qm-foot-spacer" />
                  <button className="qm-link danger" onClick={() => setPickedCond(null)}>‚ùå –û—Ç–º–µ–Ω–∞</button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* ===== –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ===== */}
        <div className={itemClass('assignee', !!pickedAss)} onClick={toggleOnly('assignee')}>
          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
          {open.assignee && (
            <div className="quickmenu-sub dropdown level-3" onClick={stopAll}>
              <div className="qm-col-list">
                {assignees.map(a => (
                  <div
                    key={a}
                    className={'quickmenu-subitem ' + (pickedAss === a ? 'is-picked' : '')}
                    onClick={() => setPickedAss(a)}
                  >
                    {a}
                  </div>
                ))}
                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <button className="qm-link" onClick={moreAssignees}>‚ûï –ï—â—ë</button>
                  <button className="qm-link danger" onClick={() => setPickedAss(null)}>‚ùå –û—Ç–º–µ–Ω–∞</button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* ===== –°–ª–æ–∂–Ω–æ—Å—Ç—å ===== */}
        <div className={itemClass('difficulty', !!pickedDiff)} onClick={toggleOnly('difficulty')}>
          –°–ª–æ–∂–Ω–æ—Å—Ç—å
          {open.difficulty && (
            <div className="quickmenu-sub dropdown level-4 narrow" onClick={stopAll}>
              <div className="qm-col-list narrow">
                {DIFFICULTY.map(d => (
                  <div
                    key={d}
                    className={'quickmenu-subitem ' + (pickedDiff === d ? 'is-picked' : '')}
                    onClick={() => setPickedDiff(d)}
                  >
                    {d}
                  </div>
                ))}
                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <span className="qm-foot-spacer" />
                  <button className="qm-link danger" onClick={() => setPickedDiff(null)}>‚ùå –û—Ç–º–µ–Ω–∞</button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* ===== –¢–∏–ø ===== */}
        <div className={itemClass('type', !!pickedType)} onClick={toggleOnly('type')}>
          –¢–∏–ø
          {open.type && (
            <div className="quickmenu-sub dropdown level-5 narrow" onClick={stopAll}>
              <div className="qm-col-list narrow">
                {TYPES.map(t => (
                  <div
                    key={t}
                    className={'quickmenu-subitem ' + (pickedType === t ? 'is-picked' : '')}
                    onClick={() => setPickedType(t)}
                  >
                    {t}
                  </div>
                ))}
                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <span className="qm-foot-spacer" />
                  <button className="qm-link danger" onClick={() => setPickedType(null)}>‚ùå –û—Ç–º–µ–Ω–∞</button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* ===== –ì—Ä—É–ø–ø–∞ ===== */}
        <div className={itemClass('group', pickedGroup !== '')} onClick={toggleOnly('group')}>
          –ì—Ä—É–ø–ø–∞
          {open.group && (
            <div className="quickmenu-sub dropdown level-6" onClick={stopAll}>
              <div className="qm-col-list">
                {GROUPS.map(g => (
                  <div
                    key={g}
                    className={'quickmenu-subitem ' + ((pickedGroup === '' && g === '–ë–µ–∑ –≥—Ä—É–ø–ø—ã') || pickedGroup === g ? 'is-picked' : '')}
                    onClick={() => setPickedGroup(g === '–ë–µ–∑ –≥—Ä—É–ø–ø—ã' ? '' : g)}
                  >
                    {g}
                  </div>
                ))}
                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <span className="qm-foot-spacer" />
                  <button className="qm-link danger" onClick={() => setPickedGroup('')}>‚ùå –°–±—Ä–æ—Å</button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      <div style={{ pointerEvents:'auto', marginTop:6, textAlign:'center', color:'#ddd', fontSize:11 }}>
        –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Å —ç—Ç–∏–º –Ω–∞–±–æ—Ä–æ–º
      </div>
    </div>
  );
}
