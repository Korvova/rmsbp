// src/companet/QuickMenu.jsx
import { useRef, useState, useMemo, useEffect } from 'react';
import './quickmenu.css';

const BASE_TITLES = [
  '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
  '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ API-–∫–ª–∏–µ–Ω—Ç–∞',
  '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞',
  'UI –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
  '–ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
];
const EXTRA_TITLES = [
  '–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Vite',
  '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ API',
  '–õ–∏–Ω—Ç–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
  '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞',
  '–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã',
  '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞',
  '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è SSO',
  '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã',
  '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
  '–ú–µ—Ö–∞–Ω–∏–∑–º —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤',
];

/* –£—Å–ª–æ–≤–∏—è —Å id ‚Üí —ç—Ç–æ –±—É–¥—É—Ç rule —É —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ */
const CONDITIONS = [
  { id: '',               label: '–ë–µ–∑ —É—Å–ª–æ–≤–∏—è' },
  { id: 'afterAny',       label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π' },
  { id: 'afterAll',       label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö' },
  { id: 'afterSelected',  label: '–ü–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π' },
  { id: 'atDate',         label: '–í –¥–∞—Ç—É (üìÖ)' },
  { id: 'afterAnyDelay',  label: '–ß–µ—Ä–µ–∑ X –¥–Ω–µ–π (‚è∞)' },
];

const BASE_ASSIGNEES = ['–ò–≤–∞–Ω', '–û–ª—å–≥–∞', '–°–µ—Ä–≥–µ–π', '–ê–π–∂–∞–Ω', '–î–º–∏—Ç—Ä–∏–π'];
const EXTRA_ASSIGNEES = ['–ú–∞—Ä–∏—è','–ê–ª–µ–∫—Å–µ–π','–ñ–∞–Ω–Ω–∞','–ü–∞–≤–µ–ª','–ï–ª–µ–Ω–∞','–ù—É—Ä–ª–∞–Ω','–ì—É–ª—å–Ω–∞—Ä','–†—É—Å–ª–∞–Ω','–¢–∏–º—É—Ä','–ö–∞—Ç–µ—Ä–∏–Ω–∞'];

const DIFFICULTY = Array.from({ length: 10 }, (_, i) => String(i + 1));
const TYPES      = ['–û—Ç—á—ë—Ç', '—Ä–∏—Å–µ—á', '–∫–æ–¥–∏–Ω–≥', '–¢–ó', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–µ–∑–∞', '–∞–Ω–∞–ª–∏–∑', '–ö–ü'];

export default function QuickMenu({ x, y, onDraftChange }) {
  const [hoverMain, setHoverMain] = useState(null); // 'title' | 'conditions' | 'assignee' | 'difficulty' | 'type' | null

  // ===== –ù–∞–∑–≤–∞–Ω–∏–µ =====
  const [hoverTitleSub, setHoverTitleSub] = useState(false);
  const [titles, setTitles] = useState(BASE_TITLES);
  const extraIdxRef = useRef(0);
  const [pickedTitle, setPickedTitle] = useState(null);
  const [titleCancelled, setTitleCancelled] = useState(false);

  // –ö–∞—Å–∫–∞–¥ –ø–æ–¥–º–µ–Ω—é
  const [hoverChainCond, setHoverChainCond]   = useState(false); // lvl2
  const [hoverChainAss,  setHoverChainAss]    = useState(false); // lvl3
  const [hoverChainDiff, setHoverChainDiff]   = useState(false); // lvl4
  const [hoverChainType, setHoverChainType]   = useState(false); // lvl5

  const showTitleSub  = (hoverMain === 'title') || hoverTitleSub || hoverChainCond || hoverChainAss || hoverChainDiff || hoverChainType;
  const showCondChain = hoverChainCond  || hoverChainAss || hoverChainDiff || hoverChainType;
  const showAssChain  = hoverChainAss   || hoverChainDiff || hoverChainType;
  const showDiffChain = hoverChainDiff  || hoverChainType;
  const showTypeChain = hoverChainType;

  const handleMoreTitles = () => {
    const chunk = 5;
    const start = extraIdxRef.current;
    const items = Array.from({ length: chunk }, (_, i) => EXTRA_TITLES[(start + i) % EXTRA_TITLES.length]);
    extraIdxRef.current = (start + chunk) % EXTRA_TITLES.length;
    setTitles(prev => Array.from(new Set([...prev, ...items])));
  };
  const onPickTitle   = t => { setPickedTitle(t); setTitleCancelled(false); };
  const onCancelTitle = () => { setPickedTitle(null); setTitleCancelled(true); };

  const titleItemClass = useMemo(() => [
    'quickmenu-item', 'has-sub',
    hoverMain === 'title' ? 'is-active' : '',
    pickedTitle ? 'is-picked' : '',
    !pickedTitle && titleCancelled ? 'is-cancelled' : '',
  ].join(' '), [hoverMain, pickedTitle, titleCancelled]);

  // ===== –£—Å–ª–æ–≤–∏—è =====
  const [pickedCond, setPickedCond] = useState(null); // {id, label} | null
  const [condCancelled, setCondCancelled] = useState(false);
  const onPickCond = c => { setPickedCond(c); setCondCancelled(false); };
  const onCancelCond = () => { setPickedCond(null); setCondCancelled(true); };

  const condItemClass = useMemo(() => [
    'quickmenu-item',
    hoverMain === 'conditions' ? 'is-active' : '',
    pickedCond ? 'is-picked' : '',
    !pickedCond && condCancelled ? 'is-cancelled' : '',
  ].join(' '), [hoverMain, pickedCond, condCancelled]);

  // ===== –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å =====
  const [assignees, setAssignees] = useState(BASE_ASSIGNEES);
  const assExtraIdxRef = useRef(0);
  const [pickedAss, setPickedAss] = useState(null);
  const [assCancelled, setAssCancelled] = useState(false);

  const handleMoreAssignees = () => {
    const chunk = 5;
    const start = assExtraIdxRef.current;
    const items = Array.from({ length: chunk }, (_, i) => EXTRA_ASSIGNEES[(start + i) % EXTRA_ASSIGNEES.length]);
    assExtraIdxRef.current = (start + chunk) % EXTRA_ASSIGNEES.length;
    setAssignees(prev => Array.from(new Set([...prev, ...items])));
  };
  const onPickAss   = a => { setPickedAss(a); setAssCancelled(false); };
  const onCancelAss = () => { setPickedAss(null); setAssCancelled(true); };

  const assItemClass = useMemo(() => [
    'quickmenu-item',
    hoverMain === 'assignee' ? 'is-active' : '',
    pickedAss ? 'is-picked' : '',
    !pickedAss && assCancelled ? 'is-cancelled' : '',
  ].join(' '), [hoverMain, pickedAss, assCancelled]);

  // ===== –°–ª–æ–∂–Ω–æ—Å—Ç—å =====
  const [pickedDiff, setPickedDiff] = useState(null);
  const [diffCancelled, setDiffCancelled] = useState(false);
  const onPickDiff   = d => { setPickedDiff(d); setDiffCancelled(false); };
  const onCancelDiff = () => { setPickedDiff(null); setDiffCancelled(true); };

  const diffItemClass = useMemo(() => [
    'quickmenu-item',
    hoverMain === 'difficulty' ? 'is-active' : '',
    pickedDiff ? 'is-picked' : '',
    !pickedDiff && diffCancelled ? 'is-cancelled' : '',
  ].join(' '), [hoverMain, pickedDiff, diffCancelled]);

  // ===== –¢–∏–ø =====
  const [pickedType, setPickedType] = useState(null);
  const [typeCancelled, setTypeCancelled] = useState(false);
  const onPickType   = t => { setPickedType(t); setTypeCancelled(false); };
  const onCancelType = () => { setPickedType(null); setTypeCancelled(true); };

  const typeItemClass = useMemo(() => [
    'quickmenu-item',
    hoverMain === 'type' ? 'is-active' : '',
    pickedType ? 'is-picked' : '',
    !pickedType && typeCancelled ? 'is-cancelled' : '',
  ].join(' '), [hoverMain, pickedType, typeCancelled]);

  // hover-commit –¥–ª—è –Ω–∏–∂–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ (–µ—â—ë/–æ—Ç–º–µ–Ω–∞)
  const hc = useRef({
    moreTitles:false, cancelTitle:false,
    cancelCond:false,
    moreAss:false, cancelAss:false,
    cancelDiff:false, cancelType:false,
  });
  const enter = key => () => { hc.current[key] = true; };
  const leave = (key, fn) => () => { if (hc.current[key]) fn(); hc.current[key] = false; };

  // === –ü–æ–¥–Ω–∏–º–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –ª—é–±–æ–º –≤—ã–±–æ—Ä–µ ===
  useEffect(() => {
    onDraftChange?.({
      title: pickedTitle || null,
      conditionId: pickedCond?.id || '',
      conditionLabel: pickedCond?.label || '',
      assignee: pickedAss || null,
      difficulty: pickedDiff || null,
      type: pickedType || null,
    });
  }, [pickedTitle, pickedCond, pickedAss, pickedDiff, pickedType, onDraftChange]);

  return (
    <div className="quickmenu" style={{ left: x, top: y }}>
      <ul className="quickmenu-summary">
        <li><span className="sm-label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>     <strong className="sm-value">{pickedTitle || '‚Äî'}</strong></li>
        <li><span className="sm-label">–£—Å–ª–æ–≤–∏—è:</span>      <strong className="sm-value">{pickedCond?.label  || '‚Äî'}</strong></li>
        <li><span className="sm-label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</span>  <strong className="sm-value">{pickedAss   || '‚Äî'}</strong></li>
        <li><span className="sm-label">–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>    <strong className="sm-value">{pickedDiff  || '‚Äî'}</strong></li>
        <li><span className="sm-label">–¢–∏–ø:</span>          <strong className="sm-value">{pickedType  || '‚Äî'}</strong></li>
      </ul>

      <div className="quickmenu-inner">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ ‚Üí ‚Ä¶ */}
        <div
          className={titleItemClass}
          onMouseEnter={() => setHoverMain('title')}
          onMouseLeave={() => setHoverMain(null)}
        >
          –ù–∞–∑–≤–∞–Ω–∏–µ

          {showTitleSub && (
            <div
              className="quickmenu-sub level-1"
              onMouseEnter={() => setHoverTitleSub(true)}
              onMouseLeave={() => setHoverTitleSub(false)}
            >
              <div className="qm-col-list">
                {titles.map(t => (
                  <div
                    key={t}
                    className={'quickmenu-subitem ' + (pickedTitle === t ? 'is-picked' : '')}
                    onMouseEnter={() => onPickTitle(t)}
                    onClick={() => onPickTitle(t)}
                  >
                    {t}
                  </div>
                ))}

                <div className="quickmenu-sep" />
                <div className="quickmenu-subfoot">
                  <button
                    className="qm-link"
                    onClick={handleMoreTitles}
                    onMouseEnter={enter('moreTitles')}
                    onMouseLeave={leave('moreTitles', handleMoreTitles)}
                  >
                    ‚ûï –ï—â—ë
                  </button>
                  <button
                    className="qm-link danger"
                    onClick={onCancelTitle}
                    onMouseEnter={enter('cancelTitle')}
                    onMouseLeave={leave('cancelTitle', onCancelTitle)}
                  >
                    ‚ùå –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>

              {/* ‚Üí –£—Å–ª–æ–≤–∏—è */}
              <div
                className="qm-next-col"
                title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Å–ª–æ–≤–∏—è–º ‚Üí"
                onMouseEnter={() => setHoverChainCond(true)}
                onMouseLeave={() => setHoverChainCond(false)}
              >
                ‚Üí
              </div>

              {showCondChain && (
                <div
                  className="quickmenu-sub level-2"
                  onMouseEnter={() => setHoverChainCond(true)}
                  onMouseLeave={() => setHoverChainCond(false)}
                >
                  <div className="qm-col-list">
                    {CONDITIONS.map(c => (
                      <div
                        key={c.id}
                        className={'quickmenu-subitem ' + (pickedCond?.id === c.id ? 'is-picked' : '')}
                        onMouseEnter={() => onPickCond(c)}
                        onClick={() => onPickCond(c)}
                      >
                        {c.label}
                      </div>
                    ))}

                    <div className="quickmenu-sep" />
                    <div className="quickmenu-subfoot">
                      <span className="qm-foot-spacer" />
                      <button
                        className="qm-link danger"
                        onClick={onCancelCond}
                        onMouseEnter={enter('cancelCond')}
                        onMouseLeave={leave('cancelCond', onCancelCond)}
                      >
                        ‚ùå –û—Ç–º–µ–Ω–∞
                      </button>
                    </div>
                  </div>

                  {/* ‚Üí –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å */}
                  <div
                    className="qm-next-col"
                    title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é ‚Üí"
                    onMouseEnter={() => setHoverChainAss(true)}
                    onMouseLeave={() => setHoverChainAss(false)}
                  >
                    ‚Üí
                  </div>

                  {showAssChain && (
                    <div
                      className="quickmenu-sub level-3"
                      onMouseEnter={() => setHoverChainAss(true)}
                      onMouseLeave={() => setHoverChainAss(false)}
                    >
                      <div className="qm-col-list">
                        {assignees.map(a => (
                          <div
                            key={a}
                            className={'quickmenu-subitem ' + (pickedAss === a ? 'is-picked' : '')}
                            onMouseEnter={() => onPickAss(a)}
                            onClick={() => onPickAss(a)}
                          >
                            {a}
                          </div>
                        ))}

                        <div className="quickmenu-sep" />
                        <div className="quickmenu-subfoot">
                          <button
                            className="qm-link"
                            onClick={handleMoreAssignees}
                            onMouseEnter={enter('moreAss')}
                            onMouseLeave={leave('moreAss', handleMoreAssignees)}
                          >
                            ‚ûï –ï—â—ë
                          </button>
                          <button
                            className="qm-link danger"
                            onClick={onCancelAss}
                            onMouseEnter={enter('cancelAss')}
                            onMouseLeave={leave('cancelAss', onCancelAss)}
                          >
                            ‚ùå –û—Ç–º–µ–Ω–∞
                          </button>
                        </div>
                      </div>

                      {/* ‚Üí –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
                      <div
                        className="qm-next-col"
                        title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Üí"
                        onMouseEnter={() => setHoverChainDiff(true)}
                        onMouseLeave={() => setHoverChainDiff(false)}
                      >
                        ‚Üí
                      </div>

                      {showDiffChain && (
                        <div
                          className="quickmenu-sub level-4 narrow"
                          onMouseEnter={() => setHoverChainDiff(true)}
                          onMouseLeave={() => setHoverChainDiff(false)}
                        >
                          <div className="qm-col-list narrow">
                            {DIFFICULTY.map(d => (
                              <div
                                key={d}
                                className={'quickmenu-subitem ' + (pickedDiff === d ? 'is-picked' : '')}
                                onMouseEnter={() => onPickDiff(d)}
                                onClick={() => onPickDiff(d)}
                              >
                                {d}
                              </div>
                            ))}

                            <div className="quickmenu-sep" />
                            <div className="quickmenu-subfoot">
                              <span className="qm-foot-spacer" />
                              <button
                                className="qm-link danger"
                                onClick={onCancelDiff}
                                onMouseEnter={enter('cancelDiff')}
                                onMouseLeave={leave('cancelDiff', onCancelDiff)}
                              >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                              </button>
                            </div>
                          </div>

                          {/* ‚Üí –¢–∏–ø */}
                          <div
                            className="qm-next-col"
                            title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–ø—É ‚Üí"
                            onMouseEnter={() => setHoverChainType(true)}
                            onMouseLeave={() => setHoverChainType(false)}
                          >
                            ‚Üí
                          </div>

                          {showTypeChain && (
                            <div
                              className="quickmenu-sub level-5 narrow"
                              onMouseEnter={() => setHoverChainType(true)}
                              onMouseLeave={() => setHoverChainType(false)}
                            >
                              <div className="qm-col-list narrow">
                                {TYPES.map(t => (
                                  <div
                                    key={t}
                                    className={'quickmenu-subitem ' + (pickedType === t ? 'is-picked' : '')}
                                    onMouseEnter={() => onPickType(t)}
                                    onClick={() => onPickType(t)}
                                  >
                                    {t}
                                  </div>
                                ))}
                                <div className="quickmenu-sep" />
                                <div className="quickmenu-subfoot">
                                  <span className="qm-foot-spacer" />
                                  <button
                                    className="qm-link danger"
                                    onClick={onCancelType}
                                    onMouseEnter={enter('cancelType')}
                                    onMouseLeave={leave('cancelType', onCancelType)}
                                  >
                                    ‚ùå –û—Ç–º–µ–Ω–∞
                                  </button>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              )}
            </div>
          )}
        </div>

        <div className={condItemClass}>–£—Å–ª–æ–≤–∏—è</div>
        <div className={assItemClass}>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</div>
        <div className={diffItemClass}>–°–ª–æ–∂–Ω–æ—Å—Ç—å</div>
        <div className={typeItemClass}>–¢–∏–ø</div>
      </div>

          <div style={{
        pointerEvents: 'auto',
        marginTop: 6,
        textAlign: 'center',
        color: '#ddd',
        fontSize: 11
      }}>
        –û—Ç–ø—É—Å—Ç–∏—Ç–µ –º—ã—à—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
      </div>


      
    </div>
  );
}
