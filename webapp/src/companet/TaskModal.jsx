import { useEffect, useState } from 'react';
import './taskmodal.css';

function formatMoney(n){
  const v = Number(n || 0);
  return new Intl.NumberFormat('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(v);
}
function formatRest(budgetId, budgets, spentMap){
  if (!budgetId) return '‚Äî';
  const b = (budgets || []).find(x => x.id === budgetId);
  if (!b) return '‚Äî';
  const spent = Number(spentMap?.[budgetId] || 0);
  const rest = Number(b.amount || 0) - spent;
  return `${formatMoney(rest)} (–∏–∑ ${formatMoney(b.amount)})`;
}

export default function TaskModal({
  open,
  task,
  stages = [],
  onClose,
  onChange,       // (patch) => void
  onDelete,       // () => void
  onOpenCalendar, // () => void
  budgets = [],
  spentByBudget = {},
}) {
  // —Ö—É–∫–∏ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞)
  const [activePanel, setActivePanel] = useState(null); // 'comments'|'people'|'settings'|'watch'|null
  const [commentText, setCommentText] = useState('');

  useEffect(() => {
    if (!open) return;
    const onKey = (e) => { if (e.key === 'Escape') onClose?.(); };
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, [open, onClose]);

  if (!open || !task) return null;

  const d = task.data || {};
  const STATUS_ITEMS = [
    { key: 'pending',   label: '–ù–æ–≤–∞—è' },
    { key: 'working',   label: '–í —Ä–∞–±–æ—Ç–µ' },
    { key: 'review',    label: '–ñ–¥–µ—Ç' },
    { key: 'done',      label: '–ì–æ—Ç–æ–≤–æ' },
    { key: 'deferred',  label: '–û—Ç–ª–æ–∂–µ–Ω–æ' },
    { key: 'declined',  label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' },
  ];

  const togglePanel = (id) => setActivePanel(cur => (cur === id ? null : id));

  const addComment = () => {
    const t = commentText.trim();
    if (!t) return;
    const next = [...(d.comments || []), { id: crypto?.randomUUID?.() ?? String(Date.now()), text: t, ts: Date.now() }];
    onChange?.({ comments: next });
    setCommentText('');
  };

  return (
    <div className="tm-wrap" onClick={onClose}>
      <div className="tm-dialog" onClick={(e) => e.stopPropagation()}>
        {/* Header */}
        <div className="tm-head">
          <div className="tm-title">–ó–∞–¥–∞—á–∞</div>
          <div className="tm-actions">
            <button className="tm-icon" title="–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ" onClick={onOpenCalendar}>üìÖ</button>
            <button className="tm-icon" title="–£–¥–∞–ª–∏—Ç—å" onClick={onDelete}>üóë</button>
            <button className="tm-icon" title="–ó–∞–∫—Ä—ã—Ç—å" onClick={onClose}>‚úñ</button>
          </div>
        </div>

        {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è ¬´—É–∑–∫–∞—è¬ª –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–π —à–∏—Ä–∏–Ω—ã –ø–æ–ª–µ–π */}
        <div className="tm-inner">
          <div className="tm-grid">
            <div className="tm-col-span-2 tm-field">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
              <input
                className="tm-input"
                value={d.label || ''}
                onChange={(e) => onChange?.({ label: e.target.value })}
              />
            </div>

            <div className="tm-col-span-2 tm-field">
              <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                className="tm-textarea"
                value={d.description || ''}
                onChange={(e) => onChange?.({ description: e.target.value })}
              />
            </div>

            <div className="tm-col-span-2 tm-field">
              <label>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</label>
              <input
                className="tm-input"
                placeholder="–§–ò–û"
                value={d.responsible || ''}
                onChange={(e) => onChange?.({ responsible: e.target.value })}
              />
            </div>

            <div className="tm-field tm-field--range">
              <label>–°–ª–æ–∂–Ω–æ—Å—Ç—å</label>
              <input
                className="tm-input"
                type="range" min={0} max={10} step={1}
                value={typeof d.difficulty === 'number' ? d.difficulty : 0}
                onChange={(e) => onChange?.({ difficulty: Number(e.target.value) })}
              />
            </div>

            <div className="tm-field">
              <label>–°—Ç–∞–¥–∏—è</label>
              <select
                className="tm-input"
                value={d.stage || stages[0]?.id || 'backlog'}
                onChange={(e) => onChange?.({ stage: e.target.value })}
              >
                {stages.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
              </select>
            </div>

            {/* –ë—é–¥–∂–µ—Ç –∏ –∑–∞—Ç—Ä–∞—Ç—ã */}
            <div className="tm-field">
              <label>–°—Ç–∞—Ç—å—è –±—é–¥–∂–µ—Ç–∞</label>
              <select
                className="tm-input"
                value={d.budgetId || ''}
                onChange={(e) => onChange?.({ budgetId: e.target.value })}
              >
                <option value="">‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</option>
                {(budgets || []).map(b => (
                  <option key={b.id} value={b.id}>{b.name}</option>
                ))}
              </select>
              <div className="tm-muted" style={{ marginTop:6 }}>
                –û—Å—Ç–∞—Ç–æ–∫ –ø–æ —Å—Ç–∞—Ç—å–µ: {formatRest(d.budgetId, budgets, spentByBudget)}
              </div>
            </div>

            <div className="tm-field">
              <label>–ó–∞—Ç—Ä–∞—Ç—ã</label>
              <input
                className="tm-input"
                type="number" min="0" step="0.01"
                value={typeof d.expense === 'number' || d.expense ? d.expense : ''}
                onChange={(e) => onChange?.({ expense: Number(e.target.value || 0) })}
                placeholder="0.00"
              />
            </div>

            <div className="tm-col-span-2 tm-field">
              <label>–°—Ç–∞—Ç—É—Å</label>
              <div className="tm-status-row">
                {STATUS_ITEMS.map(s => (
                  <button
                    key={s.key}
                    className={`tm-chip ${d.status === s.key ? 'is-active' : ''}`}
                    onClick={() => onChange?.({ status: s.key })}
                  >
                    {s.label}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="tm-foot">
            <div className="tm-id">ID: {task.id}</div>
            <div className="tm-foot-actions">
              <button className="tm-btn" onClick={onOpenCalendar}>–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å</button>
              <button className="tm-btn tm-btn--primary" onClick={onClose}>–ì–æ—Ç–æ–≤–æ</button>
            </div>
          </div>
        </div>

        {/* –ë–æ–∫–æ–≤—ã–µ –∫—Ä—É–≥–ª—ã–µ –∫–Ω–æ–ø–∫–∏ */}
        <div className={`tm-side ${activePanel ? 'tm-side--inset' : ''}`}>
          <button
            className={`tm-side__btn ${activePanel === 'watch' ? 'is-active' : ''}`}
            title="–ù–∞–±–ª—é–¥–∞—Ç—å"
            onClick={() => togglePanel('watch')}
          >üëÅÔ∏è</button>

          <button
            className={`tm-side__btn ${activePanel === 'settings' ? 'is-active' : ''}`}
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            onClick={() => togglePanel('settings')}
          >‚öôÔ∏è</button>

          <button
            className={`tm-side__btn ${activePanel === 'people' ? 'is-active' : ''}`}
            title="–£—á–∞—Å—Ç–Ω–∏–∫–∏"
            onClick={() => togglePanel('people')}
          >üë•</button>

          <button
            className={`tm-side__btn ${activePanel === 'comments' ? 'is-active' : ''}`}
            title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
            onClick={() => togglePanel('comments')}
          >üí¨</button>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –≤—ã–µ–∑–∂–∞—é—â–∞—è –ø–ª–∞—à–∫–∞ */}
        <div className={`tm-drawer ${activePanel ? 'is-open' : ''}`}>
          <div className="tm-drawer__head">
            <div className="tm-drawer__title">
              {activePanel === 'comments' && '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'}
              {activePanel === 'people'   && '–£—á–∞—Å—Ç–Ω–∏–∫–∏'}
              {activePanel === 'settings' && '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}
              {activePanel === 'watch'    && '–ù–∞–±–ª—é–¥–∞—Ç—å'}
            </div>
            <button className="tm-icon" onClick={() => setActivePanel(null)}>‚úñ</button>
          </div>

          <div className="tm-drawer__body">
            {activePanel === 'comments' && (
              <div className="tm-comments">
                {!(d.comments?.length) ? (
                  <div className="tm-empty">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</div>
                ) : (
                  <ul style={{ paddingLeft: 16, marginTop: 0 }}>
                    {d.comments.map(c => (
                      <li key={c.id} style={{ marginBottom: 8 }}>
                        <div className="tm-muted" style={{ fontSize: 12 }}>
                          {new Date(c.ts).toLocaleString()}
                        </div>
                        <div>{c.text}</div>
                      </li>
                    ))}
                  </ul>
                )}

                <textarea
                  className="tm-textarea"
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚Ä¶"
                  value={commentText}
                  onChange={(e) => setCommentText(e.target.value)}
                />
                <button className="tm-btn tm-btn--primary" onClick={addComment}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>

                <div className="tm-hint">–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏</div>
              </div>
            )}

            {activePanel === 'people' && (
              <div className="tm-people">
                <h4>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫</h4>
                <ul><li>{d.creator || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li></ul>

                <h4>–ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏</h4>
                {Array.isArray(d.observers) && d.observers.length > 0
                  ? <ul>{d.observers.map((o,i) => <li key={i}>{o}</li>)}</ul>
                  : <div className="tm-muted">–ù–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π</div>
                }

                <h4>–°–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</h4>
                {Array.isArray(d.accomplices) && d.accomplices.length > 0
                  ? <ul>{d.accomplices.map((o,i) => <li key={i}>{o}</li>)}</ul>
                  : <div className="tm-muted">–ù–µ—Ç —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</div>
                }
              </div>
            )}

            {activePanel === 'settings' && (
              <div>
                <div className="tm-field">
                  <label>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</label>
                  <div className="tm-switch">
                    <input
                      type="checkbox"
                      checked={!!d.overdue}
                      onChange={(e) => onChange?.({ overdue: e.target.checked })}
                    />
                    <span className="tm-muted">–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ¬´–æ–≥–æ–Ω—å¬ª –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ</span>
                  </div>
                </div>

                <div className="tm-field">
                  <label>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –Ω–∞–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π</label>
                  <div className="tm-switch">
                    <input
                      type="checkbox"
                      checked={!!d.showIcon}
                      onChange={(e) => onChange?.({ showIcon: e.target.checked })}
                    />
                  </div>
                </div>
              </div>
            )}

            {activePanel === 'watch' && (
              <div>
                <div className="tm-muted">–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.</div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
