import { useState } from 'react';
import './rulemenu.css';

const START_RULES = [
  { id: '',              label: '–ë–µ–∑ —É—Å–ª–æ–≤–∏—è' },
  { id: 'afterAny',      label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π' },
  { id: 'afterAnyDelay', label: '‚Ä¶—á–µ—Ä–µ–∑ X-–¥–Ω–µ–π (‚è∞)' },
  { id: 'afterAnyDate',  label: '‚Ä¶–≤ –¥–∞—Ç—É (üìÖ)' },
  { id: 'atDate',        label: '–ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (üìÖ)' },
  { id: 'afterAll',      label: '–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö' },
  { id: 'afterSelected', label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π' },
];

const CANCEL_MODES = [
  { id: 'none',                    label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å' },
  { id: 'prevCanceled',            label: '–û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ—Ç–º–µ–Ω–µ–Ω–∞' },
  { id: 'anySelectedCanceled',     label: '–û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞' },
];

export default function RuleMenu({
  value,                         // —Å—Ç–∞—Ä—Ç-–ø—Ä–∞–≤–∏–ª–æ
  onChange,
  cancelPolicy,                  // { enabled:boolean, mode:'none'|'prevCanceled'|'anySelectedCanceled' }
  onCancelPolicyToggle,          // (enabled:boolean)=>void
  onCancelPolicyChange,          // (mode)=>void
  onCancel,                      // –∫–Ω–æ–ø–∫–∞ ‚ùå
  onFreeze,                      // –∫–Ω–æ–ø–∫–∞ ‚ùÑÔ∏è
}) {
  const [open, setOpen] = useState(false);

  return (
    <div className="rule-wrapper">
      <button className="rule-btn" onClick={() => setOpen(o => !o)}>‚öôÔ∏è</button>

      {open && (
        <div className="rule-menu">
          <div className="rule-section">
            <div className="rule-title">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ:</div>
            {START_RULES.map(r => (
              <label key={r.id}>
                <input
                  type="radio"
                  name="start_rule"
                  checked={value === r.id}
                  onChange={() => onChange(r.id)}
                />
                {r.label}
              </label>
            ))}
          </div>

          <div className="rule-section">
            <div className="rule-title">–ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω—ã:</div>
            <label className="toggle">
              <input
                type="checkbox"
                checked={!!cancelPolicy?.enabled}
                onChange={e => onCancelPolicyToggle?.(e.target.checked)}
              />
              –í–∫–ª—é—á–∏—Ç—å
            </label>

            <fieldset disabled={!cancelPolicy?.enabled} className="cancel-group">
              {CANCEL_MODES.map(m => (
                <label key={m.id}>
                  <input
                    type="radio"
                    name="cancel_mode"
                    checked={cancelPolicy?.mode === m.id}
                    onChange={() => onCancelPolicyChange?.(m.id)}
                  />
                  {m.label}
                </label>
              ))}
            </fieldset>
          </div>

          <hr />
          <div className="rule-actions">
            <button onClick={onCancel}>‚ùå –û—Ç–º–µ–Ω–∞</button>
            <button onClick={onFreeze}>‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å</button>
          </div>
        </div>
      )}
    </div>
  );
}
