import { useState } from 'react';
import './rulemenu.css';

const START_RULES = [
  { id: '',              label: '–ë–µ–∑ —É—Å–ª–æ–≤–∏—è' },
  { id: 'afterAny',      label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π' },
  { id: 'afterAnyDelay', label: '‚Ä¶—á–µ—Ä–µ–∑ X-–¥–Ω–µ–π (‚è∞)' },
  { id: 'afterAnyDate',  label: '‚Ä¶–≤ –¥–∞—Ç—É (üìÖ)' },
  { id: 'atDate',        label: '–ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (üìÖ)' },
  { id: 'afterAll',      label: '–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö' },
  { id: 'afterSelected', label: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π' },
];

const CANCEL_MODES = [
  { id: 'none',                label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å' },
  { id: 'prevCanceled',        label: '–û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ—Ç–º–µ–Ω–µ–Ω–∞' },
  { id: 'anySelectedCanceled', label: '–û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞' },
];

export default function RuleMenu({
  value, onChange,

  cancelPolicy,
  onCancelPolicyToggle,
  onCancelPolicyChange,

  deps = [],

  selectedDeps = [],
  onToggleDep,

  cancelSelectedDeps = [],
  onToggleCancelDep,

  onCancel, onFreeze,
}) {
  const [open, setOpen] = useState(false);

  const showStartPicker  = value === 'afterSelected';
  const showCancelPicker = !!(cancelPolicy?.enabled && cancelPolicy?.mode === 'anySelectedCanceled');

  return (
    <div className="rule-wrapper">
      <button
        type="button"
        className="rule-btn"
        onClick={() => setOpen(o => !o)}
        aria-expanded={open}
        aria-haspopup="dialog"
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
      >
        ‚öôÔ∏è
      </button>

      {open ? (
        <div className="rule-menu" role="dialog">
          {/* ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ */}
          <section className="rule-section">
            <div className="rule-title">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ:</div>

            <div className="rule-options">
              {START_RULES.map(r => (
                <div key={r.id}>
                  <label>
                    <input
                      type="radio"
                      name="start_rule"
                      checked={value === r.id}
                      onChange={() => onChange(r.id)}
                    />
                    {r.label}
                  </label>

                  {/* —Å–ø–∏—Å–æ–∫ –í–°–¢–ê–í–õ–Ø–ï–ú –ü–†–Ø–ú–û –ü–û–î afterSelected */}
                  {r.id === 'afterSelected' && showStartPicker && (
                    <div className="deps-inline">
                      {deps.length === 0 ? (
                        <div className="muted">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π</div>
                      ) : (
                        deps.map(d => (
                          <label key={d.edgeId}>
                            <input
                              type="checkbox"
                              checked={selectedDeps.includes(d.edgeId)}
                              onChange={e => onToggleDep?.(d.edgeId, e.target.checked)}
                            />
                            {d.label}
                          </label>
                        ))
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </section>

          {/* ‚îÄ‚îÄ –û—Ç–º–µ–Ω–∞ ‚îÄ‚îÄ */}
          <section className="rule-section">
            <div className="rule-title">–ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω—ã:</div>

            <div className="rule-options">
              <label className="toggle">
                <input
                  type="checkbox"
                  checked={!!cancelPolicy?.enabled}
                  onChange={e => onCancelPolicyToggle?.(e.target.checked)}
                />
                –í–∫–ª—é—á–∏—Ç—å
              </label>

              <fieldset disabled={!cancelPolicy?.enabled} className="cancel-group">
                {CANCEL_MODES.map(m => (
                  <div key={m.id}>
                    <label>
                      <input
                        type="radio"
                        name="cancel_mode"
                        checked={cancelPolicy?.mode === m.id}
                        onChange={() => onCancelPolicyChange?.(m.id)}
                      />
                      {m.label}
                    </label>

                    {/* —Å–ø–∏—Å–æ–∫ –í–°–¢–ê–í–õ–Ø–ï–ú –ü–†–Ø–ú–û –ü–û–î anySelectedCanceled */}
                    {m.id === 'anySelectedCanceled' && showCancelPicker && (
                      <div className="deps-inline">
                        {deps.length === 0 ? (
                          <div className="muted">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π</div>
                        ) : (
                          deps.map(d => (
                            <label key={d.edgeId}>
                              <input
                                type="checkbox"
                                checked={cancelSelectedDeps.includes(d.edgeId)}
                                onChange={e => onToggleCancelDep?.(d.edgeId, e.target.checked)}
                              />
                              {d.label}
                            </label>
                          ))
                        )}
                      </div>
                    )}
                  </div>
                ))}
              </fieldset>
            </div>
          </section>

          <hr />
          <div className="rule-actions">
            <button type="button" onClick={onCancel}>‚ùå –û—Ç–º–µ–Ω–∞</button>
            <button type="button" onClick={onFreeze}>‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å</button>
          </div>
        </div>
      ) : null}
    </div>
  );
}
